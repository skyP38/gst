gst-launch-1.0 v4l2src device=/dev/video2 ! image/jpeg,width=1280,height=720,framerate=30/1 ! jpegparse ! jpegdec  ! autovide
osink

gst-launch-1.0 v4l2src device=/dev/video2 ! autovideosink

gst-launch-1.0 v4l2src device=/dev/video2 ! image/jpeg,width=1920,height=1080,framerate=30/1 ! jpegdec  ! video/x-raw,format=I420  ! autovideosink

gst-launch-1.0 v4l2src device=/dev/video2 ! image/jpeg,width=1920,height=1080,framerate=30/1 ! jpegdec  ! video/x-raw,format=I420  ! xvimagesink sync=false force-aspect-ratio=true  

gst-launch-1.0 v4l2src device=/dev/video2 ! image/jpeg,width=1920,height=1080,framerate=30/1 ! jpegdec  ! video/x-raw,format=I420  ! fpsdisplaysink video-sink="xvimagesink sync=false force-aspect-ratio=true" text-overlay=true sync=false


gst-launch-1.0 v4l2src device=/dev/video2 ! image/jpeg,width=1920,height=1080,framerate=30/1 ! jpegdec  ! video/x-raw,format=I420  ! fpsdisplaysink video-sink="xvimagesink sync=false force-aspect-ratio=true" text-overlay=true sync=false
watch -n 0.5 'top -b -n 1 -p $(pgrep gst-launch) | grep -A 1 PID'


gst-launch-1.0 v4l2src device=/dev/video2 ! image/jpeg,width=1920,height=1080,framerate=30/1 ! jpegparse ! vajpegdec  ! video/x-raw,format=I420  ! fpsdisplaysink video-sink="vaapisink sync=false force-aspect-ratio=true" text-overlay=true sync=false
watch -n 0.5 'top -b -n 1 -p $(pgrep gst-launch) | grep -A 1 PID'

gst-launch-1.0 v4l2src device=/dev/video2 ! image/jpeg,width=1920,height=1080,framerate=30/1 ! queue max-size-buffers=3 leaky=downstream  ! jpegparse ! vaapijpegdec  ! video/x-raw,format=I420  ! fpsdisplaysink video-sink="vaapisink sync=false force-aspect-ratio=true" text-overlay=true sync=false


gst-launch-1.0 v4l2src device=/dev/video2 ! image/jpeg,width=1920,height=1080,framerate=30/1 ! queue max-size-buffers=3 leaky=downstream  ! jpegparse ! vaapijpegdec  ! vaapipostproc ! fpsdisplaysink video-sink="vaapisink sync=false force-aspect-ratio=true" text-overlay=true sync=false



// func main() {
// 	gst.Init(nil)

// 	config := struct {
// 		Device     string
// 		OutputFile string
// 		Duration   time.Duration
// 	}{
// 		Device:     "/dev/video2",
// 		OutputFile: "output.mp4",
// 		Duration:   10 * time.Second,
// 	}

// 	pipelineStr := fmt.Sprintf(
// 		`v4l2src device=%s num-buffers=100 !
// 		 videoconvert ! queue ! x264enc ! mp4mux !
// 		 filesink location=%s`,
// 		config.Device,
// 		config.OutputFile,
// 	)
// 	// pipelineStr := fmt.Sprintf(
// 	// 	`v4l2src device=%s !
// 	//  image/jpeg,width=1280,height=720,framerate=30/1 !
// 	//  jpegparse !
// 	//  jpegdec !
// 	//  videoconvert !
// 	//  queue !
// 	//  x264enc tune=zerolatency bitrate=5000 !
// 	//  h264parse !
// 	//  mp4mux faststart=true !
// 	//  filesink location=%s sync=true`,
// 	// 	config.Device,
// 	// 	config.OutputFile,
// 	// )

// 	// pipeline, _ := gst.NewPipelineFromString("videotestsrc ! videoconvert ! autovideosink")
// 	// pipeline, _ := gst.NewPipelineFromString("autovideosrc ! videoconvert ! jpegenc ! filesink location=test.jpg")
// 	// sink.SetProperty("location", "test.jpg")
// 	pipeline, err := gst.NewPipelineFromString(pipelineStr)
// 	if err != nil {
// 		log.Fatalf("Pipeline creation failed: %v\nTry testing with:\ngst-launch-1.0 v4l2src device=%s ! image/jpeg ! jpegparse ! jpegdec ! videoconvert ! autovideosink",
// 			err, config.Device)
// 	}

// 	mainLoop := glib.NewMainLoop(glib.MainContextDefault(), false)

// 	bus := pipeline.GetPipelineBus()
// 	bus.AddWatch(func(msg *gst.Message) bool {
// 		switch msg.Type() {
// 		case gst.MessageEOS:
// 			log.Println("End of stream")
// 			mainLoop.Quit()
// 		case gst.MessageError:
// 			err := msg.ParseError()
// 			log.Printf("Error: %v (debug: %v)", err.Error(), err.DebugString())
// 			mainLoop.Quit()
// 		}
// 		return true
// 	})

// 	pipeline.SetState(gst.StatePlaying)
// 	// if pipeline.SetState(gst.StatePlaying) == gst.StateChangeFailure {
// 	// 	log.Fatal("Failed to start pipeline")
// 	// }
// 	// if stateChangeReturn == gst.StateChangeFailure {
// 	// 	log.Fatal("Failed to start pipeline")
// 	// }
// 	defer pipeline.SetState(gst.StateNull)

// 	sigChan := make(chan os.Signal, 1)
// 	signal.Notify(sigChan, syscall.SIGINT, syscall.SIGTERM)

// 	fmt.Printf("start\n")

// 	stopTimer := time.After(config.Duration)

// 	go mainLoop.Run()

// 	select {
// 	case <-sigChan:
// 		pipeline.SendEvent(gst.NewEOSEvent()) // Корректное завершение потока
// 	case <-stopTimer:
// 		pipeline.SendEvent(gst.NewEOSEvent()) // Корректное завершение потока
// 	}

// 	// time.Sleep(5 * time.Second)

// 	fmt.Println("end")
// }


gst-launch-1.0 v4l2src device=/dev/video0 ! image/jpeg,width=1920,height=1080,framerate=30/1 ! queue max-size-buffers=3 leaky=downstream  ! jpegparse ! vaapijpegdec  ! vaapipostproc ! fpsdisplaysink video-sink="vaapisink sync=false force-aspect-ratio=true" text-overlay=true sync=false

gst-launch-1.0 v4l2src device=/dev/video0 ! \
image/jpeg,width=1920,height=1080,framerate=30/1 ! \
queue max-size-buffers=3 leaky=downstream ! \
jpegparse ! vaapijpegdec ! \
vaapipostproc ! \
tee name=t ! \
queue ! \
fpsdisplaysink video-sink="vaapisink sync=false force-aspect-ratio=true" text-overlay=true sync=false \
t. ! \
queue ! \
vaapih264enc ! \
h264parse ! \
mp4mux ! \
filesink location=output.mp4


gst-launch-1.0 v4l2src device=/dev/video0 ! \
image/jpeg,width=1920,height=1080,framerate=30/1 ! \
jpegparse ! vaapijpegdec ! \
vaapipostproc ! \
videoconvert ! queue ! \
vaapih264enc ! \
h264parse ! \
matroskamux ! \
filesink location=test.mkv sync=false



gst-launch-1.0 filesrc location=test.mkv ! \
matroskademux ! \
h264parse ! \
vaapih264dec ! \
vaapipostproc ! \
videoconvert ! \
vaapisink sync=false



RTP
gst-launch-1.0 v4l2src device=/dev/video0 ! \
image/jpeg,width=1920,height=1080,framerate=30/1 ! \
jpegparse ! vaapijpegdec ! \
vaapipostproc ! \
videoconvert ! queue ! \
vaapih264enc ! \
h264parse ! \
rtph264pay config-interval=1 pt=96 ! \
udpsink host=127.0.0.1 port=5000 sync=false

ffplay -protocol_whitelist "file,udp,rtp" stream.sdp


RTSP
gcc test.c  $(pkg-config --cflags --libs gstreamer-1.0 gstreamer-rtsp-server-1.0)

gst-launch-1.0 playbin uri=rtsp://localhost:8554/stream